/*
 * @(#)ScriptOptionsView.java
 * CubeTwister. Copyright Â© 2020 Werner Randelshofer, Switzerland. MIT License.
 */
package ch.randelshofer.cubetwister.doc;

import ch.randelshofer.gui.Fonts;
import ch.randelshofer.io.ParseException;
import org.jhotdraw.annotation.Nonnull;
import org.jhotdraw.annotation.Nullable;
import org.jhotdraw.util.ResourceBundleUtil;

import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.event.UndoableEditListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ResourceBundle;

/**
 * The ScriptOptionsView is an editor for the following properties
 * of a ScriptModel: Generator.
 *
 * @author  Werner Randelshofer
 */
public class ScriptOptionsView
extends JPanel
implements EntityView, PropertyChangeListener {
    private final static long serialVersionUID = 1L;
    /**
     * The resource bundle used for internationalisation.
     */
    private ResourceBundleUtil labels;

    /**
     * The model
     */
    @Nullable
    private ScriptModel model = new ScriptModel();


    /** Creates new form ScriptOptionsView */
    public ScriptOptionsView() {
        labels = new ResourceBundleUtil(ResourceBundle.getBundle("ch.randelshofer.cubetwister.Labels"));
        initComponents();
        generatorLabel.setFont(Fonts.getEmphasizedDialogFont());
        generatorRadioButton.setFont(Fonts.getDialogFont());
        solverRadioButton.setFont(Fonts.getDialogFont());
        model.addPropertyChangeListener(this);

    }

    /**
     * Sets the model.
     */
    public void setModel(@Nullable ScriptModel newValue) {
        ScriptModel oldValue = model;
        if (oldValue != null) {
            oldValue.removePropertyChangeListener(this);
        }
        model = newValue;
        if (newValue != null) {
            newValue.addPropertyChangeListener(this);
            if (newValue.isGenerator()) {
                generatorRadioButton.setSelected(true);
            } else {
                solverRadioButton.setSelected(true);
            }
        }
        updateEnabled();
    }

    public void setEnabled(boolean b) {
        super.setEnabled(b);
        updateEnabled();
    }

    public void updateEnabled() {
        boolean b = model != null && isEnabled();

        java.awt.Component[] c = getComponents();
        for (int i=0; i < c.length; i++) {
            c[i].setEnabled(b);
        }
    }

    /**
     * Gets the model.
     */
    @Nullable
    public ScriptModel getModel() {
        return model;
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        generatorGroup = new javax.swing.ButtonGroup();
        generatorLabel = new javax.swing.JLabel();
        generatorRadioButton = new javax.swing.JRadioButton();
        solverRadioButton = new javax.swing.JRadioButton();

        generatorLabel.setText(labels.getString("script.scriptTypeTitle")); // NOI18N

        generatorGroup.add(generatorRadioButton);
        generatorRadioButton.setSelected(true);
        generatorRadioButton.setText(labels.getString("script.generatorRadio")); // NOI18N
        generatorRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                generatorStateChanged(evt);
            }
        });

        generatorGroup.add(solverRadioButton);
        solverRadioButton.setText(labels.getString("script.solverRadio")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generatorLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(solverRadioButton)
                            .addComponent(generatorRadioButton))))
                .addContainerGap(272, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generatorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generatorRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(solverRadioButton)
                .addGap(222, 222, 222))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void generatorStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_generatorStateChanged
        boolean b = generatorRadioButton.isSelected();
        if (b != model.isGenerator()) {
            boolean isChecked = model.isChecked();
            model.setGenerator(b);
            if (isChecked) {
            try {
                model.check();
            } catch (ParseException ex) {
               //
            }
            }
        }
    }//GEN-LAST:event_generatorStateChanged

    public void propertyChange(@Nonnull PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(ScriptModel.PROP_IS_GENERATOR)) {
            if (model.isGenerator()) {
                generatorRadioButton.setSelected(true);
            } else {
                solverRadioButton.setSelected(true);
            }
        }
    }

    public void setModel(EntityModel newValue) {
        setModel((ScriptModel) newValue);
    }

    @Nonnull
    public JComponent getViewComponent() {
        return this;
    }

    public void addUndoableEditListener(UndoableEditListener l) {
    }

    public void removeUndoableEditListener(UndoableEditListener l) {
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup generatorGroup;
    private javax.swing.JLabel generatorLabel;
    private javax.swing.JRadioButton generatorRadioButton;
    private javax.swing.JRadioButton solverRadioButton;
    // End of variables declaration//GEN-END:variables

}
