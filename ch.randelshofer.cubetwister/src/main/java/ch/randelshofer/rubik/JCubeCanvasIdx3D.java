/*
 * @(#)JCubeCanvasIdx3D.java
 * CubeTwister. Copyright Â© 2020 Werner Randelshofer, Switzerland. MIT License.
 */
package ch.randelshofer.rubik;

import ch.randelshofer.rubik.cube3d.Cube3D;
import idx3d.idx3d_RenderPipeline;
import idx3d.idx3d_Scene;

import javax.swing.JComponent;

/**
 * Cube3DCanvas.
 *
 * @author Werner Randelshofer
 */
public class JCubeCanvasIdx3D extends JComponent implements Cube3DCanvas {
    private final static long serialVersionUID = 1L;
    private Cube3D cube3D;

    /**
     * Creates a new instance.
     */
    public JCubeCanvasIdx3D() {
        initComponents();
        idx3dCanvas.setSwipeTimeout(Integer.MAX_VALUE);
    }

    public void setSharedRenderPipeline(idx3d_RenderPipeline sharedPipeline) {
        idx3dCanvas.setSharedRenderPipeline(sharedPipeline);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        idx3dCanvas = new idx3d.idx3d_JCanvas();

        setLayout(new java.awt.BorderLayout());

        add(idx3dCanvas, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    @Override
    public Cube3D getCube3D() {
        return cube3D;
    }

    @Override
    public java.awt.Component getVisualComponent() {
        return idx3dCanvas;
    }

    @Override
    public void reset() {
        if (idx3dCanvas != null) {
            idx3dCanvas.reset();
        }
    }

    public void dispose() {
        if (idx3dCanvas != null) {
            idx3dCanvas.dispose();
        }
    }

    @Override
    public void setCube3D(Cube3D newValue) {
        Cube3D oldValue = cube3D;
        if (cube3D != null) {
            cube3D.removeChangeListener(idx3dCanvas);
            idx3dCanvas.setScene(null);
        }
        cube3D = newValue;
        if (cube3D != null) {
            idx3dCanvas.setScene((idx3d_Scene) cube3D.getScene());
            cube3D.addChangeListener(idx3dCanvas);
            repaint();
            idx3dCanvas.setLock(cube3D.getCube());
        } else {
            repaint();
        }
        firePropertyChange("cube3D", oldValue, newValue);
    }

    @Override
    public void setBackgroundImage(java.awt.Image image) {
    }

    @Override
    public void setCamera(String newValue) {
        idx3dCanvas.setCamera(newValue);
    }

    @Override
    public void setLock(Object lock) {
        idx3dCanvas.setLock(lock);
    }

    @Override
    public void flush() {
        idx3dCanvas.flush();
    }
    /*
    public void doLayout() {
    // Since the cubes are mostly quadratic,
    // to increase rendering speed, we constrain the rendering area to a
    // quadrat.
    if (getComponentCount() == 1) {
    Component c = getComponent(0);
    int width = getWidth();
    int height = getHeight();
    int size = Math.min(width, height);
    c.setBounds((width - size) / 2, (height - size) / 2, size, size);
    }
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private idx3d.idx3d_JCanvas idx3dCanvas;
    // End of variables declaration//GEN-END:variables
}
