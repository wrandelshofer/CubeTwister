/*
 * @(#)LazyPanel.java
 * CubeTwister. Copyright Â© 2020 Werner Randelshofer, Switzerland. MIT License.
 */
package ch.randelshofer.gui;

import ch.randelshofer.gui.icon.BusyIcon;
import org.jhotdraw.annotation.Nonnull;
import org.jhotdraw.annotation.Nullable;
import org.jhotdraw.gui.Worker;

import javax.swing.JComponent;
import javax.swing.JLabel;
import java.awt.BorderLayout;
import java.awt.Graphics;

/**
 * LazyPanel lazily creates and adds a child component to it when the
 * lazy panel is showing.
 *
 * @author Werner Randelshofer
 */
public class LazyPanel extends javax.swing.JPanel {
    private final static long serialVersionUID = 1L;
    private String viewClassName;
    private boolean isRealized = false;
    private JComponent lazyView;
    @Nullable
    private Worker<JComponent> worker;

    /** Creates new form LazyPanel */
    public LazyPanel() {
        initComponents();
        setLayout(new BorderLayout());
    }

    public void setViewClassName(String className) {
        this.viewClassName=className;
        isRealized = false;

    }
    @Override
    public void paint(Graphics g) {
        realizeView();
        super.paint(g);
    }

    public void realizeView() {
        if (!isRealized) {
            if (viewClassName != null && lazyView == null && worker == null) {
                isRealized = true;
                removeAll();

                JLabel progressIndicator = new JLabel(BusyIcon.getInstance());
                progressIndicator.setHorizontalAlignment(JLabel.CENTER);
                add(progressIndicator);
                if (getParent() != null) {
                    getParent().validate();
                }
                worker = new Worker<JComponent>() {

                    @Override
                    public JComponent construct() throws Exception {
                            return (JComponent) Class.forName(viewClassName).newInstance();
                    }

                    @Override
                    public void done(JComponent value) {
                        lazyView = value;
                        removeAll();
                        add(lazyView, BorderLayout.CENTER);
                        invalidate();
                        if (getParent() != null) {
                            getParent().validate();
                        }
                    }

                    @Override
                    protected void failed(@Nonnull Throwable error) {
                        System.err.println("LazyPanel couldn't construct " + viewClassName);
                        error.printStackTrace();
                    }

                    @Override
                    protected void finished() {
                        worker = null;
                    }

                };
                worker.start();
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
