/*
 * @(#)TestMutableJTable.java
 * CubeTwister. Copyright Â© 2020 Werner Randelshofer, Switzerland. MIT License.
 */
package ch.randelshofer.test;

import ch.randelshofer.gui.table.DefaultMutableTableModel;
import org.jhotdraw.annotation.Nonnull;

/**
 * TestMutableJTable.
 * @author Werner Randelshofer
 */
public class TestMutableJTable extends javax.swing.JFrame {
        private final static long serialVersionUID = 1L;

    /** Creates new form TestDnDJTable */
    public TestMutableJTable() {
        initComponents();

        DefaultMutableTableModel m = new DefaultMutableTableModel(
        new Object[][] {
            { "Skifahren", Boolean.TRUE },
            { "Eislaufen", Boolean.FALSE },
            { "Bobfahren", Boolean.FALSE },
            { "Schlitteln", Boolean.TRUE }
        },
        new Object[] {"Sportart", "Aktiv"},
        new Class[] {String.class, Boolean.class}
        );
        table1.setModel(m);

        m = new DefaultMutableTableModel(
        new Object[][] {
            { "Schwimmen", Boolean.TRUE },
            { "Segeln", Boolean.FALSE },
            { "Tauchen", Boolean.TRUE },
            { "Rudern", Boolean.TRUE }
        },
        new Object[] {"Sportart", "Aktiv"},
        new Class[] {String.class, Boolean.class}
        );
        table2.setModel(m);


        setSize(600,400);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new ch.randelshofer.gui.MutableJTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        table2 = new ch.randelshofer.gui.MutableJTable();
        jLabel1 = new javax.swing.JLabel();

        FormListener formListener = new FormListener();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        addWindowListener(formListener);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 400));
        jScrollPane1.setViewportView(table1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(12, 20, 0, 10);
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(200, 400));
        jScrollPane2.setViewportView(table2);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(12, 10, 0, 20);
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane2, gridBagConstraints);

        jLabel1.setText("<html><b>MutableJTable demo</b><br>\nMutableJTable provides basic editing capabilities for a MutableTableModel. You can use the popup menu available on both tables to transfer rows from one table to the other using the clipboard. The popup menus also allow the creation and deletion of rows.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        getContentPane().add(jLabel1, gridBagConstraints);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.WindowListener {
        public void windowActivated(java.awt.event.WindowEvent evt) {
        }

        public void windowClosed(java.awt.event.WindowEvent evt) {
        }

        public void windowClosing(@Nonnull java.awt.event.WindowEvent evt) {
            if (evt.getSource() == TestMutableJTable.this) {
                TestMutableJTable.this.exitForm(evt);
            }
        }

        public void windowDeactivated(java.awt.event.WindowEvent evt) {
        }

        public void windowDeiconified(java.awt.event.WindowEvent evt) {
        }

        public void windowIconified(java.awt.event.WindowEvent evt) {
        }

        public void windowOpened(java.awt.event.WindowEvent evt) {
        }
    }//GEN-END:initComponents

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        new TestMutableJTable().setVisible(true);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private ch.randelshofer.gui.MutableJTable table1;
    private ch.randelshofer.gui.MutableJTable table2;
    // End of variables declaration//GEN-END:variables

}
